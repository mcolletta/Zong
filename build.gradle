//apply plugin: 'java'
defaultTasks 'build'

allprojects {

	repositories {
		mavenCentral()
		maven { url "http://files.xenoage.com/maven2" }
	}

	plugins.withType(JavaPlugin).whenPluginAdded {
		compileJava.options.encoding = 'UTF-8'
		compileTestJava.options.encoding = 'UTF-8'
	}

}

task createSharedJar(dependsOn:[':tools:runFilesystemIndexCreator', ':tools:copyFile', ':tools:sharedJar']) {

	def build_paths = []
	subprojects.each() { subproject ->
		build_paths << "${subproject.name}/build/libs/"
	}
	ant.with {
	    echo("create libraries folder")
		def destDir = "libraries"
		if (!new File(destDir).exists())
			mkdir(dir: destDir)
		build_paths.each { path ->
			if (path.startsWith("utils-"))
				path = "utils/" + path
			if (new File(path).exists()) {
			    copy(todir: destDir) {
			        fileset(dir: path) {
			            include(name: "**/*.jar")
			        }
		    	}
		    }
	    }
	    echo("done")
	}
}

//TODO in subprojects:
//additional configurations for compile classpaths (use as soon as Buildship (Gradle in Eclipse) supports it)
//configurations { //TODO: add configuration as soon as Buildship (Gradle in Eclipse) supports it
//	compileOnly
//	testCompileOnly { extendsFrom compileOnly }
//} 
//sourceSets -> main / test:
//	compileClasspath += configurations.compileOnly //TODO: add configuration as soon as Buildship (Gradle in Eclipse) supports it
//	compileClasspath += configurations.compileOnly + configurations.testCompileOnly //TODO: add configuration as soon as Buildship (Gradle in Eclipse) supports it

//TODO
task distPlayer(type: Jar) {
	
	subprojects.each() { subproject ->
		ext.jarDir = "${subproject.name}/build/libs/"
		from (zipTree(ext.jarDir + subproject.name + ".jar")) { exclude 'license.txt' }
		from (zipTree(ext.jarDir + subproject.name + ".jar")) { include 'license.txt' into("licenses/${subproject.name}/") }
	};
	from 'license.txt'
	destinationDir = file("build/dist/onejar")
	archiveName = 'utils.jar'
	manifest.attributes 'Created-By': 'Xenoage Software'
}

//create JavaDoc using Ant task
ant.importBuild 'javadoc.build.xml'
task createDoc {
	dependsOn antZongJavadoc
}
